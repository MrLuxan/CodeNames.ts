{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/Game.ts","src/UIElements/Board.ts","src/UIElements/Card.ts","src/UIElements/UIElement.ts","src/UIElements/UiElement.ts","src/WordList.ts","src/enums.ts"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","1","module","Board","Render","document","body","_super","enums_1","Card_1","WordList_1","UiElement_1","UiElement","__extends","prototype","BuildArray","cardData","cardPack","_i","cardData_1","pair","push","ShuffleArray","j","Math","floor","random","_a","outputElement","gemColor","this","StartingTeam","eCardType","BlueSpy","html","DomElement","htmlToElement","append","playArea","querySelector","Cards","forEach","card","_this","RedSpy","cardOrder","Neutral","Assassin","randomNumbers","randomnumber","words","indexOf","Card","Click","style","color","backgroundColor","ToggledColor","CardType","word","addEventListener","appendChild","pword","cardType","template","createElement","innerHTML","trim","content","firstChild"],"mappings":"CAAA,SAAAA,EAAAC,EAAAC,EAAAC,GAAA,SAAAC,EAAAC,EAAAC,GAAA,IAAAJ,EAAAG,GAAA,CAAA,IAAAJ,EAAAI,GAAA,CAAA,IAAAE,EAAA,mBAAAC,SAAAA,QAAA,IAAAF,GAAAC,EAAA,OAAAA,EAAAF,GAAA,GAAA,GAAAI,EAAA,OAAAA,EAAAJ,GAAA,GAAA,IAAAK,EAAA,IAAAC,MAAA,uBAAAN,EAAA,KAAA,MAAAK,EAAAE,KAAA,mBAAAF,EAAA,IAAAG,EAAAX,EAAAG,GAAA,CAAAS,QAAA,IAAAb,EAAAI,GAAA,GAAAU,KAAAF,EAAAC,QAAA,SAAAd,GAAA,OAAAI,EAAAH,EAAAI,GAAA,GAAAL,IAAAA,IAAAa,EAAAA,EAAAC,QAAAd,EAAAC,EAAAC,EAAAC,GAAA,OAAAD,EAAAG,GAAAS,QAAA,IAAA,IAAAL,EAAA,mBAAAD,SAAAA,QAAAH,EAAA,EAAAA,EAAAF,EAAAa,OAAAX,IAAAD,EAAAD,EAAAE,IAAA,OAAAD,EAAA,CAAA,CAAAa,EAAA,CAAA,SAAAT,EAAAU,EAAAJ,kECEmB,IAFnBN,EAAA,sBAEuBW,QACjBC,OAAOC,SAASC,kcCHtB,IAKAC,EALAC,EAAAhB,EAAA,YACAiB,EAAAjB,EAAA,UACAkB,EAAAlB,EAAA,eACAmB,EAAAnB,EAAA,eAEAW,GAAAI,EAA2BI,EAAAC,UAAAC,EAAAV,EAAAI,GA4BvBJ,EAAAW,UAAAC,WAAA,SAAWC,GAIP,IAFA,IAAIC,EAA4B,GAEfC,EAAA,EAAAC,EAAAH,EAAAE,EAAAC,EAAAnB,OAAAkB,IAEb,IAFC,IAAIE,EAAID,EAAAD,GAED7B,EAAI,EAAIA,EAAI+B,EAAK,GAAI/B,IAEzB4B,EAASI,KAAKD,EAAK,IAI3B,OAAOH,GAGXd,EAAAW,UAAAQ,aAAA,SAAa5B,GACT,UAASL,EAAIK,EAAEM,OAAS,EAAO,EAAJX,EAAOA,IAAK,CACnC,IAAMkC,EAAIC,KAAKC,MAAMD,KAAKE,UAAYrC,EAAI,IAC1CsC,EAAA,CAAAjC,EAAA6B,GAAA7B,EAAAL,IAACK,EAAAL,GAAAsC,EAAA,GAAMjC,EAAA6B,GAAAI,EAAA,GAEX,OAAOjC,GAGXS,EAAAW,UAAAV,OAAA,SAAOwB,GAEH,IAAIC,EAAoBC,KAAKC,cAAgBvB,EAAAwB,UAAUC,QAAU,OAAS,MACtEC,EAAe,oEACkDL,EAAQ,yDACRA,EAAQ,qFAERA,EAAQ,yDACRA,EAAQ,iBAE7EC,KAAKK,WAAaL,KAAKM,cAAcF,GACrCN,EAAcS,OAAOP,KAAKK,YAE1B,IAAIG,EAAyBR,KAAKK,WAAWI,cAAc,aAC3DT,KAAKU,MAAMC,QAAQ,SAAUC,GACzBA,EAAKtC,OAAOkC,MAGxBnC,GAjEI,SAAAA,IAAA,IAAAwC,EAEIpC,EAAAR,KAAA+B,OAAOA,KALXa,EAAAH,MAAqB,GAMjBG,EAAKZ,aAAgD,GAAjCP,KAAKC,MAAsB,EAAhBD,KAAKE,UAAqBlB,EAAAwB,UAAUY,OAASpC,EAAAwB,UAAUC,QAEtF,IAAIY,EAA8BF,EAAK5B,WAAW,CAAC,CAACP,EAAAwB,UAAUc,QAAQ,GACnB,CAACtC,EAAAwB,UAAUY,OAAO,GAClB,CAACpC,EAAAwB,UAAUC,QAAQ,GACnB,CAACzB,EAAAwB,UAAUe,SAAS,GACpB,CAACJ,EAAKZ,aAAa,KACtEY,EAAKrB,aAAauB,GAGlB,IADA,IAAIG,EAA+B,GAC5BA,EAAchD,OAAS6C,EAAU7C,QACxC,CACI,IAAIiD,EAAezB,KAAKC,MAAMD,KAAKE,SAAWhB,EAAAwC,MAAMlD,SACT,EAAvCgD,EAAcG,QAAQF,KAC1BD,EAAcA,EAAchD,QAAUiD,GAG1C,IAAK,IAAI5D,EAAI,EAAGA,EAAIwD,EAAU7C,OAAQX,IAClCsD,EAAKH,MAAMnB,KAAK,IAAIZ,EAAA2C,KAAK1C,EAAAwC,MAAMF,EAAc3D,IAAKwD,EAAUxD,cAzB3DS,EAAAK,MAAAA,+dCLb,IAGAI,EAHAC,EAAAhB,EAAA,YACAmB,EAAAnB,EAAA,eAEA4D,GAAA7C,EAA2BI,EAAAC,UAAAC,EAAAuC,EAAA7C,GAWvB6C,EAAAtC,UAAAuC,MAAA,WAEIvB,KAAKK,WAAWmB,MAAMC,MAAQ,OAC9BzB,KAAKK,WAAWmB,MAAME,gBAAkB1B,KAAK2B,gBAGjDL,EAAAtC,UAAA2C,aAAA,WAEI,IAAIF,EACJ,OAAQzB,KAAK4B,UAET,KAAKlD,EAAAwB,UAAUe,SAAUQ,EAAQ,QAAS,MAC1C,KAAK/C,EAAAwB,UAAUc,QAASS,EAAQ,OAAQ,MACxC,KAAK/C,EAAAwB,UAAUY,OAAQW,EAAQ,MAAO,MACtC,KAAK/C,EAAAwB,UAAUC,QAASsB,EAAQ,OAEpC,OAAOA,GAGXH,EAAAtC,UAAAV,OAAA,SAAOwB,GAAP,IAAAe,EAAAb,KAEQI,EAAe,0BAA0BJ,KAAK6B,KAAI,cAAc7B,KAAK6B,KAAI,eAE7E7B,KAAKK,WAAaL,KAAKM,cAAcF,GACrCJ,KAAKK,WAAWyB,iBAAiB,QAAS,SAAC3E,GAAY,OAAA0D,EAAKU,UAC5DzB,EAAciC,YAAY/B,KAAKK,aAEvCiB,GAlCI,SAAAA,EAAYU,EAAeC,GAA3B,IAAApB,EAEIpC,EAAAR,KAAA+B,OAAOA,YACPa,EAAKgB,KAAOG,EACZnB,EAAKe,SAAWK,IARXjE,EAAAsD,KAAAA,oHCHb,IAAAxC,GAIIA,EAAAE,UAAAsB,cAAA,SAAcF,GACV,IAAI8B,EAAW3D,SAAS4D,cAAc,YAEtC,OADAD,EAASE,UAAYhC,EAAKiC,OACNH,EAASI,QAAQC,YAG7CzD,GAVA,SAAAA,KAAad,EAAAc,UAAAA,wFCAb,IAAAA,GAIIA,EAAAE,UAAAsB,cAAA,SAAcF,GACV,IAAI8B,EAAW3D,SAAS4D,cAAc,YAEtC,OADAD,EAASE,UAAYhC,EAAKiC,OACNH,EAASI,QAAQC,YAG7CzD,GAVA,SAAAA,KAAad,EAAAc,UAAAA,wFCAFd,EAAAoD,MAAuB,CAC9B,SACA,YACA,UACA,SACA,OACA,UACA,OACA,OACA,UACA,YACA,QACA,SACA,MACA,SACA,QACA,SACA,YACA,SACA,OACA,WACA,WACA,UACA,SACA,YACA,OACA,QACA,SACA,MACA,SACA,OACA,QACA,MACA,YACA,YACA,UACA,aACA,YACA,SACA,OACA,UACA,UACA,OACA,OACA,OACA,WACA,MACA,UACA,YACA,UACA,QACA,UACA,YACA,QACA,UACA,OACA,YACA,QACA,OACA,YACA,OACA,UACA,UACA,YACA,QACA,QACA,SACA,OACA,QACA,QACA,YACA,OACA,QACA,OACA,SACA,OACA,WACA,QACA,QACA,YACA,QACA,QACA,MACA,SACA,OACA,QACA,cACA,OACA,cACA,SACA,QACA,MACA,UACA,SACA,UACA,WACA,OACA,UACA,OACA,OACA,+CCpGJ,IAAYlB,oDAAAA,EAAAlC,EAAAkC,YAAAlC,EAAAkC,UAAS,KAAGA,EAAA,OAAA,GAAA,SAAQA,EAAAA,EAAA,QAAA,GAAA,UAASA,EAAAA,EAAA,QAAA,GAAA,UAASA,EAAAA,EAAA,SAAA,GAAA","file":"CodeNames.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","import { Board } from \"./UIElements/Board\";\r\n\r\nlet board: Board = new Board();\r\nboard.Render(document.body);","import { eCardType } from \"../enums\"\r\nimport { Card } from \"./Card\"\r\nimport { words } from \"../WordList\"\r\nimport { UiElement} from \"./UiElement\"\r\n\r\nexport class Board extends UiElement {\r\n    Cards: Array<Card> = [];\r\n    StartingTeam: eCardType;\r\n    \r\n    constructor()\r\n    {\r\n        super();\r\n        this.StartingTeam = Math.floor(Math.random() * 2) == 1 ? eCardType.RedSpy : eCardType.BlueSpy;\r\n\r\n        let cardOrder: Array<eCardType> = this.BuildArray([[eCardType.Neutral,7],\r\n                                                           [eCardType.RedSpy,8],\r\n                                                           [eCardType.BlueSpy,8],\r\n                                                           [eCardType.Assassin,1],\r\n                                                           [this.StartingTeam,1]]);\r\n        this.ShuffleArray(cardOrder);\r\n\r\n        let randomNumbers: Array<number> = [];\r\n        while (randomNumbers.length < cardOrder.length)\r\n        {\r\n            let randomnumber = Math.floor(Math.random() * words.length);\r\n            if (randomNumbers.indexOf(randomnumber) > -1) continue;\r\n            randomNumbers[randomNumbers.length] = randomnumber;\r\n        }\r\n\r\n        for (let i = 0; i < cardOrder.length; i++)\r\n            this.Cards.push(new Card(words[randomNumbers[i]], cardOrder[i]));\r\n    }\r\n    \r\n    BuildArray(cardData :Array<Array<eCardType|number>>)\r\n    {\r\n        let cardPack:Array<eCardType> = [];\r\n\r\n        for (let pair of cardData)\r\n        {\r\n            for(let i = 0 ; i < pair[1]; i++)\r\n            {\r\n                cardPack.push(pair[0]);\r\n            }\r\n        }\r\n\r\n        return cardPack;\r\n    }\r\n\r\n    ShuffleArray(a:Array<eCardType>) {\r\n        for (let i = a.length - 1; i > 0; i--) {\r\n            const j = Math.floor(Math.random() * (i + 1));\r\n            [a[i], a[j]] = [a[j], a[i]];\r\n        }\r\n        return a;\r\n    }\r\n\r\n    Render(outputElement: HTMLElement)\r\n    {\r\n        let gemColor: string = (this.StartingTeam == eCardType.BlueSpy ? \"Blue\" : \"Red\");\r\n        let html :string = `<div class=\"Board\">`+\r\n                            `<div class=\"Gem Gem1\" style=\"background-color:${gemColor}\"></div>` +\r\n                            `<div class=\"Gem Gem2\" style=\"background-color:${gemColor}\"></div>` +\r\n                            `<div class=\"PlayArea\"></div>` +\r\n                            `<div class=\"Gem Gem3\" style=\"background-color:${gemColor}\"></div>` +\r\n                            `<div class=\"Gem Gem4\" style=\"background-color:${gemColor}\"></div>` +\r\n                            `</div>`;\r\n        this.DomElement = this.htmlToElement(html);\r\n        outputElement.append(this.DomElement);\r\n\r\n        let playArea : HTMLElement = this.DomElement.querySelector(\".PlayArea\");\r\n        this.Cards.forEach(function (card) {\r\n            card.Render(playArea);\r\n        })\r\n    }\r\n}","import { eCardType } from \"../enums\"\r\nimport { UiElement } from \"./UiElement\";\r\n\r\nexport class Card  extends UiElement {\r\n    word: string;\r\n    CardType: eCardType;\r\n\r\n    constructor(pword: string, cardType: eCardType)\r\n    {\r\n        super();\r\n        this.word = pword;\r\n        this.CardType = cardType;\r\n    }\r\n\r\n    Click()\r\n    {\r\n        this.DomElement.style.color = \"#FFF\";\r\n        this.DomElement.style.backgroundColor = this.ToggledColor();\r\n    }\r\n\r\n    ToggledColor()\r\n    {\r\n        let color: string;\r\n        switch (this.CardType)\r\n        {\r\n            case eCardType.Assassin: color = \"Black\"; break;\r\n            case eCardType.Neutral: color = \"Gray\"; break;\r\n            case eCardType.RedSpy: color = \"Red\"; break;\r\n            case eCardType.BlueSpy: color = \"Blue\"; break;\r\n        }\r\n        return color;\r\n    }\r\n\r\n    Render(outputElement: HTMLElement)\r\n    {\r\n        let html :string = `<div class=\"Card\"><div>${this.word}</div><div>${this.word}</div></div>`;\r\n\r\n        this.DomElement = this.htmlToElement(html);\r\n        this.DomElement.addEventListener('click', (e:Event) => this.Click());\r\n        outputElement.appendChild(this.DomElement);\r\n    }\r\n}","export class UiElement {\r\n\r\n    DomElement: HTMLElement;\r\n\r\n    htmlToElement(html : string) : HTMLElement{\r\n        let template = document.createElement('template'); \r\n        template.innerHTML = html.trim();\r\n        return <HTMLElement>template.content.firstChild;\r\n    }\r\n\r\n}","export class UiElement {\r\n\r\n    DomElement: HTMLElement;\r\n\r\n    htmlToElement(html : string) : HTMLElement{\r\n        let template = document.createElement('template'); \r\n        template.innerHTML = html.trim();\r\n        return <HTMLElement>template.content.firstChild;\r\n    }\r\n\r\n}","export let words: Array<string> = [\r\n    \"remain\",\r\n    \"axiomatic\",\r\n    \"thought\",\r\n    \"sedate\",\r\n    \"unit\",\r\n    \"typical\",\r\n    \"lewd\",\r\n    \"cute\",\r\n    \"amazing\",\r\n    \"glamorous\",\r\n    \"elbow\",\r\n    \"collar\",\r\n    \"own\",\r\n    \"summer\",\r\n    \"grain\",\r\n    \"tawdry\",\r\n    \"energetic\",\r\n    \"melted\",\r\n    \"oven\",\r\n    \"adorable\",\r\n    \"separate\",\r\n    \"squalid\",\r\n    \"cobweb\",\r\n    \"calculate\",\r\n    \"ball\",\r\n    \"bathe\",\r\n    \"marble\",\r\n    \"ice\",\r\n    \"vanish\",\r\n    \"spot\",\r\n    \"dirty\",\r\n    \"toe\",\r\n    \"structure\",\r\n    \"entertain\",\r\n    \"brother\",\r\n    \"victorious\",\r\n    \"appliance\",\r\n    \"belong\",\r\n    \"bent\",\r\n    \"naughty\",\r\n    \"adamant\",\r\n    \"even\",\r\n    \"bang\",\r\n    \"meal\",\r\n    \"arrogant\",\r\n    \"fax\",\r\n    \"mammoth\",\r\n    \"unwritten\",\r\n    \"roasted\",\r\n    \"brown\",\r\n    \"painful\",\r\n    \"recognise\",\r\n    \"spiky\",\r\n    \"include\",\r\n    \"rock\",\r\n    \"unnatural\",\r\n    \"drain\",\r\n    \"loss\",\r\n    \"important\",\r\n    \"fold\",\r\n    \"morning\",\r\n    \"useless\",\r\n    \"direction\",\r\n    \"girls\",\r\n    \"shade\",\r\n    \"curved\",\r\n    \"card\",\r\n    \"swift\",\r\n    \"alert\",\r\n    \"imaginary\",\r\n    \"love\",\r\n    \"exist\",\r\n    \"bomb\",\r\n    \"notice\",\r\n    \"tank\",\r\n    \"parallel\",\r\n    \"gabby\",\r\n    \"goofy\",\r\n    \"dinosaurs\",\r\n    \"whine\",\r\n    \"count\",\r\n    \"lip\",\r\n    \"tickle\",\r\n    \"snow\",\r\n    \"earth\",\r\n    \"belligerent\",\r\n    \"cake\",\r\n    \"psychedelic\",\r\n    \"letter\",\r\n    \"strap\",\r\n    \"rub\",\r\n    \"confuse\",\r\n    \"mitten\",\r\n    \"creator\",\r\n    \"puzzling\",\r\n    \"joke\",\r\n    \"spotted\",\r\n    \"glue\",\r\n    \"food\",\r\n    \"sticky\",\r\n    ];","export enum eCardType { RedSpy, BlueSpy, Neutral, Assassin}\r\n"]}